---
layout: base.njk
title: "Article Ratings Dashboard"
description: "AI-powered content analysis dashboard with ratings for different criteria"
pagination:
  data: collections.posts
  size: 100
---

<div class="container mx-auto px-4 py-8 bg-base-100" x-data="ratingsApp" x-init="init()">
  <div class="mb-8">
    <h1 class="text-4xl font-bold mb-4 text-center text-primary">
      <span class="icon-[tabler--star] size-8 inline mr-2"></span>
      Article Ratings Dashboard
    </h1>
    <p class="text-lg text-center text-secondary">AI-powered content analysis with detailed ratings and feedback</p>
  </div>

  <!-- Controls Section -->
  <div class="mb-6 flex flex-col sm:flex-row items-center justify-center gap-4">
    <!-- Generate Ratings Button -->
    <button 
      class="btn btn-primary"
      @click="generateRatings()"
      :disabled="isGenerating"
    >
      <span class="icon-[tabler--robot] size-5 mr-2"></span>
      <span x-text="isGenerating ? 'Generating...' : 'Generate AI Ratings'"></span>
    </button>
    
    <!-- Letter Grades Toggle -->
    <div class="flex items-center gap-3">
      <span class="text-sm font-medium">Show Letter Grades</span>
      <input 
        type="checkbox" 
        class="switch switch-primary"
        x-model="showLetterGrades"
      >
    </div>
  </div>

  <!-- Mobile Sort Controls -->
  <div class="block md:hidden mb-4">
    <div class="flex items-center justify-between">
      <h2 class="text-lg font-semibold">
        <span class="icon-[tabler--list] size-5 mr-2"></span>
        Articles
      </h2>
      <div class="dropdown relative inline-flex">
        <button type="button" class="dropdown-toggle btn btn-sm btn-soft btn-primary" data-dropdown-toggle="#mobile-sort-dropdown" aria-haspopup="menu" aria-expanded="false" aria-label="Sort">
          <span class="icon-[tabler--arrows-sort] size-4 mr-1"></span>
          Sort
          <span class="icon-[tabler--chevron-down] dropdown-open:rotate-180 size-4 ml-1"></span>
        </button>
        <ul id="mobile-sort-dropdown" class="dropdown-menu dropdown-open:opacity-100 hidden min-w-52 p-2 shadow border border-base-300 bg-base-100 z-50" role="menu" aria-orientation="vertical">
          <li><button @click="sortArticles('title', 'asc')" class="dropdown-item text-left">Title A-Z</button></li>
          <li><button @click="sortArticles('title', 'desc')" class="dropdown-item text-left">Title Z-A</button></li>
          <li><button @click="sortArticles('date', 'desc')" class="dropdown-item text-left">Newest First</button></li>
          <li><button @click="sortArticles('date', 'asc')" class="dropdown-item text-left">Oldest First</button></li>
          <li class="dropdown-title"><span>Ratings</span></li>
          <li><button @click="sortArticles('overall', 'desc')" class="dropdown-item text-left">Overall Rating ↓</button></li>
          <li><button @click="sortArticles('overall', 'asc')" class="dropdown-item text-left">Overall Rating ↑</button></li>
          <li><button @click="sortArticles('writing_quality', 'desc')" class="dropdown-item text-left">Writing Quality ↓</button></li>
          <li><button @click="sortArticles('originality', 'desc')" class="dropdown-item text-left">Originality ↓</button></li>
          <li><button @click="sortArticles('engagement', 'desc')" class="dropdown-item text-left">Engagement ↓</button></li>
          <li><button @click="sortArticles('depth', 'desc')" class="dropdown-item text-left">Depth ↓</button></li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Desktop Table Header -->
  <div class="hidden md:block mb-4">
    <h2 class="text-xl font-semibold">
      <span class="icon-[tabler--table] size-6 mr-2"></span>
      Content Analysis Results
    </h2>
  </div>

  <!-- Ratings Table - Desktop -->
  <div class="overflow-x-auto hidden md:block">
    <table class="table table-zebra w-full">
      <thead>
        <tr class="bg-base-300">
          <th class="text-left">
            <button @click="sortArticles('title')" class="flex items-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors">
              <span>Article</span>
              <span class="size-3 opacity-50" :class="getSortIcon('title')"></span>
            </button>
          </th>
          <th class="text-center">
            <button @click="sortArticles('writing_quality')" class="flex items-center justify-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors w-full">
              <span>Writing Quality</span>
              <span class="size-3 opacity-50" :class="getSortIcon('writing_quality')"></span>
            </button>
          </th>
          <th class="text-center">
            <button @click="sortArticles('originality')" class="flex items-center justify-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors w-full">
              <span>Originality</span>
              <span class="size-3 opacity-50" :class="getSortIcon('originality')"></span>
            </button>
          </th>
          <th class="text-center">
            <button @click="sortArticles('engagement')" class="flex items-center justify-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors w-full">
              <span>Engagement</span>
              <span class="size-3 opacity-50" :class="getSortIcon('engagement')"></span>
            </button>
          </th>
          <th class="text-center">
            <button @click="sortArticles('depth')" class="flex items-center justify-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors w-full">
              <span>Depth</span>
              <span class="size-3 opacity-50" :class="getSortIcon('depth')"></span>
            </button>
          </th>
          <th class="text-center">
            <button @click="sortArticles('overall')" class="flex items-center justify-center space-x-1 hover:bg-base-200 p-2 rounded transition-colors w-full">
              <span>Overall</span>
              <span class="size-3 opacity-50" :class="getSortIcon('overall')"></span>
            </button>
          </th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        <template x-for="article in getSortedArticles()" :key="article.slug">
          <tr class="hover:bg-base-100">
            <!-- Article Info -->
            <td class="min-w-0">
              <div class="flex items-center space-x-3">
                <div class="avatar avatar-placeholder">
                  <div class="bg-primary text-primary-content w-10 rounded-full">
                    <span class="text-md uppercase" x-text="getAuthorInitials(article.author, article.title)"></span>
                  </div>
                </div>
                <div class="min-w-0 flex-1">
                  <div class="font-semibold text-sm truncate max-w-xs" :title="article.title" x-text="article.title"></div>
                  <div class="text-xs text-secondary truncate max-w-xs">
                    <span x-text="article.dateFormatted"></span>
                    <span x-show="article.author" x-text="' • ' + article.author"></span>
                  </div>
                </div>
              </div>
            </td>
            
            <!-- Rating Columns -->
            <td class="text-center">
              <template x-if="getRating(article.slug, 'writing_quality') === null">
                <span class="text-base-300">Not rated</span>
              </template>
              <template x-if="getRating(article.slug, 'writing_quality') !== null">
                <div class="rating-stars flex items-center justify-center space-x-1" 
                     @mouseenter="showTooltip($event, 'writing_quality', article.slug)"
                     @mouseleave="hideTooltip()">
                  <template x-for="star in [1,2,3,4,5]" :key="star">
                    <span :class="getStarIcon(getStarType(getRating(article.slug, 'writing_quality'), star)) + ' ' + getStarClass(getStarType(getRating(article.slug, 'writing_quality'), star))" 
                          :data-rating="star"></span>
                  </template>
                  <div class="ml-2 flex items-center space-x-1">
                    <span class="text-xs font-semibold" x-text="getRating(article.slug, 'writing_quality').toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span class="text-xs font-bold bg-base-200 px-1.5 py-0.5 rounded" 
                            :class="getLetterGrade(getRating(article.slug, 'writing_quality')).class" 
                            x-text="getLetterGrade(getRating(article.slug, 'writing_quality')).grade"></span>
                    </template>
                  </div>
                </div>
              </template>
            </td>
            <td class="text-center">
              <template x-if="getRating(article.slug, 'originality') === null">
                <span class="text-base-300">Not rated</span>
              </template>
              <template x-if="getRating(article.slug, 'originality') !== null">
                <div class="rating-stars flex items-center justify-center space-x-1" 
                     @mouseenter="showTooltip($event, 'originality', article.slug)"
                     @mouseleave="hideTooltip()">
                  <template x-for="star in [1,2,3,4,5]" :key="star">
                    <span :class="getStarIcon(getStarType(getRating(article.slug, 'originality'), star)) + ' ' + getStarClass(getStarType(getRating(article.slug, 'originality'), star))" 
                          :data-rating="star"></span>
                  </template>
                  <div class="ml-2 flex items-center space-x-1">
                    <span class="text-xs font-semibold" x-text="getRating(article.slug, 'originality').toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span class="text-xs font-bold bg-base-200 px-1.5 py-0.5 rounded" 
                            :class="getLetterGrade(getRating(article.slug, 'originality')).class" 
                            x-text="getLetterGrade(getRating(article.slug, 'originality')).grade"></span>
                    </template>
                  </div>
                </div>
              </template>
            </td>
            <td class="text-center">
              <template x-if="getRating(article.slug, 'engagement') === null">
                <span class="text-base-300">Not rated</span>
              </template>
              <template x-if="getRating(article.slug, 'engagement') !== null">
                <div class="rating-stars flex items-center justify-center space-x-1" 
                     @mouseenter="showTooltip($event, 'engagement', article.slug)"
                     @mouseleave="hideTooltip()">
                  <template x-for="star in [1,2,3,4,5]" :key="star">
                    <span :class="getStarIcon(getStarType(getRating(article.slug, 'engagement'), star)) + ' ' + getStarClass(getStarType(getRating(article.slug, 'engagement'), star))" 
                          :data-rating="star"></span>
                  </template>
                  <div class="ml-2 flex items-center space-x-1">
                    <span class="text-xs font-semibold" x-text="getRating(article.slug, 'engagement').toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span class="text-xs font-bold bg-base-200 px-1.5 py-0.5 rounded" 
                            :class="getLetterGrade(getRating(article.slug, 'engagement')).class" 
                            x-text="getLetterGrade(getRating(article.slug, 'engagement')).grade"></span>
                    </template>
                  </div>
                </div>
              </template>
            </td>
            <td class="text-center">
              <template x-if="getRating(article.slug, 'depth') === null">
                <span class="text-base-300">Not rated</span>
              </template>
              <template x-if="getRating(article.slug, 'depth') !== null">
                <div class="rating-stars flex items-center justify-center space-x-1" 
                     @mouseenter="showTooltip($event, 'depth', article.slug)"
                     @mouseleave="hideTooltip()">
                  <template x-for="star in [1,2,3,4,5]" :key="star">
                    <span :class="getStarIcon(getStarType(getRating(article.slug, 'depth'), star)) + ' ' + getStarClass(getStarType(getRating(article.slug, 'depth'), star))" 
                          :data-rating="star"></span>
                  </template>
                  <div class="ml-2 flex items-center space-x-1">
                    <span class="text-xs font-semibold" x-text="getRating(article.slug, 'depth').toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span class="text-xs font-bold bg-base-200 px-1.5 py-0.5 rounded" 
                            :class="getLetterGrade(getRating(article.slug, 'depth')).class" 
                            x-text="getLetterGrade(getRating(article.slug, 'depth')).grade"></span>
                    </template>
                  </div>
                </div>
              </template>
            </td>
            <td class="text-center">
              <template x-if="getOverallRating(article.slug) === null">
                <span class="text-base-300">Not rated</span>
              </template>
              <template x-if="getOverallRating(article.slug) !== null">
                <div class="badge badge-lg border flex items-center gap-2" 
                     :class="getOverallBadgeClasses(getOverallRating(article.slug)).badgeClass">
                  <span class="flex items-center gap-1">
                    <span class="icon-[tabler--star] size-3"></span>
                    <span x-text="getOverallBadgeClasses(getOverallRating(article.slug)).label"></span>
                  </span>
                  <span class="badge badge-sm" 
                        :class="getOverallBadgeClasses(getOverallRating(article.slug)).nestedBadgeClass">
                    <span x-text="getOverallRating(article.slug).toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span x-text="' (' + getLetterGrade(getOverallRating(article.slug)).grade + ')'"></span>
                    </template>
                  </span>
                </div>
              </template>
            </td>
            
            <!-- Actions -->
            <td class="text-center">
              <button 
                class="btn btn-sm btn-ghost"
                data-overlay="#analysisModal"
                @click="openModal(article.slug)"
                :disabled="!hasRatingData(article.slug)"
                :title="hasRatingData(article.slug) ? 'View detailed analysis' : 'No analysis available - generate ratings first'"
                aria-haspopup="dialog" 
                aria-expanded="false" 
                aria-controls="analysisModal"
              >
                <span class="icon-[tabler--eye] size-4"></span>
              </button>
            </td>
          </tr>
        </template>
      </tbody>
      <tfoot x-show="statistics && Object.keys(statistics).length > 0" class="bg-base-200 border-t-2 border-base-300">
        <tr>
          <td class="font-semibold">
            <div class="flex items-center space-x-2">
              <span class="icon-[tabler--calculator] size-4"></span>
              <span>Average</span>
            </div>
          </td>
          <template x-for="criteria in ['writing_quality', 'originality', 'engagement', 'depth', 'overall']" :key="criteria">
            <td class="text-center font-semibold">
              <template x-if="!statistics[criteria] || statistics[criteria].count === 0">
                <span class="text-base-300">-</span>
              </template>
              <template x-if="statistics[criteria] && statistics[criteria].count > 0">
                <div class="flex flex-col items-center">
                  <span class="text-sm font-bold" x-text="statistics[criteria].average.toFixed(2)"></span>
                  <template x-if="showLetterGrades">
                    <span class="text-xs bg-base-300 px-1 py-0.5 rounded" 
                          :class="getLetterGrade(statistics[criteria].average).class" 
                          x-text="getLetterGrade(statistics[criteria].average).grade"></span>
                  </template>
                </div>
              </template>
            </td>
          </template>
          <td class="text-center">-</td>
        </tr>
        <tr>
          <td class="font-semibold">
            <div class="flex items-center space-x-2">
              <span class="icon-[tabler--chart-bar] size-4"></span>
              <span>Std Dev</span>
            </div>
          </td>
          <template x-for="criteria in ['writing_quality', 'originality', 'engagement', 'depth', 'overall']" :key="criteria">
            <td class="text-center font-semibold text-sm">
              <template x-if="!statistics[criteria] || statistics[criteria].count === 0">
                <span class="text-base-300">-</span>
              </template>
              <template x-if="statistics[criteria] && statistics[criteria].count > 0">
                <div class="flex flex-col items-center">
                  <span class="text-xs" x-text="'±' + statistics[criteria].stdDev.toFixed(2)"></span>
                  <span class="text-xs text-base-content/60" x-text="'(n=' + statistics[criteria].count + ')'"></span>
                </div>
              </template>
            </td>
          </template>
          <td class="text-center">-</td>
        </tr>
      </tfoot>
    </table>
  </div>

  <!-- Mobile Card Layout -->
  <div class="block md:hidden space-y-4">
    <template x-for="article in getSortedArticles()" :key="article.slug">
      <div class="card bg-base-100 shadow-md">
        <div class="card-body p-4">
          <!-- Article Header -->
          <div class="flex items-center space-x-3 mb-4">
            <div class="avatar avatar-placeholder">
              <div class="bg-primary text-primary-content w-12 rounded-full">
                <span class="text-lg uppercase" x-text="getAuthorInitials(article.author, article.title)"></span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <h3 class="font-semibold text-base mb-1" :title="article.title" x-text="article.title"></h3>
              <div class="text-sm text-secondary">
                <span x-text="article.dateFormatted"></span>
                <span x-show="article.author" x-text="' • ' + article.author"></span>
              </div>
            </div>
            <button 
              class="btn btn-sm btn-circle btn-ghost"
              data-overlay="#analysisModal"
              @click="openModal(article.slug)"
              :disabled="!hasRatingData(article.slug)"
              :title="hasRatingData(article.slug) ? 'View detailed analysis' : 'No analysis available - generate ratings first'"
              aria-haspopup="dialog" 
              aria-expanded="false" 
              aria-controls="analysisModal"
            >
              <span class="icon-[tabler--eye] size-4"></span>
            </button>
          </div>

          <!-- Overall Rating -->
          <div class="flex items-center justify-between mb-4 p-3 bg-base-200 rounded-lg">
            <span class="font-medium">Overall Rating</span>
            <template x-if="getOverallRating(article.slug) === null">
              <span class="text-base-300">Not rated</span>
            </template>
            <template x-if="getOverallRating(article.slug) !== null">
              <div class="badge badge-lg border flex items-center gap-2" 
                   :class="getOverallBadgeClasses(getOverallRating(article.slug)).badgeClass">
                <span class="flex items-center gap-1">
                  <span class="icon-[tabler--star] size-3"></span>
                  <span x-text="getOverallBadgeClasses(getOverallRating(article.slug)).label"></span>
                </span>
                <span class="badge badge-sm" 
                      :class="getOverallBadgeClasses(getOverallRating(article.slug)).nestedBadgeClass">
                  <span x-text="getOverallRating(article.slug).toFixed(1)"></span>
                  <template x-if="showLetterGrades">
                    <span x-text="' (' + getLetterGrade(getOverallRating(article.slug)).grade + ')'"></span>
                  </template>
                </span>
              </div>
            </template>
          </div>

          <!-- Criteria Ratings Grid -->
          <div class="grid grid-cols-2 gap-3">
            <template x-for="criteria in ['writing_quality', 'originality', 'engagement', 'depth']" :key="criteria">
              <div class="flex flex-col p-3 bg-base-200 rounded-lg">
                <div class="flex items-center justify-center mb-2">
                  <span class="text-xs font-medium text-center" x-text="formatCriteriaName(criteria)"></span>
                </div>
                <template x-if="getRating(article.slug, criteria) === null">
                  <span class="text-base-300 text-center text-xs">No stars</span>
                </template>
                <template x-if="getRating(article.slug, criteria) !== null">
                  <div class="rating-stars flex items-center justify-center space-x-0.5" 
                       @mouseenter="showTooltip($event, criteria, article.slug)"
                       @mouseleave="hideTooltip()">
                    <template x-for="star in [1,2,3,4,5]" :key="star">
                      <span :class="getStarIcon(getStarType(getRating(article.slug, criteria), star)) + ' ' + getStarClass(getStarType(getRating(article.slug, criteria), star), 'size-3')" 
                            :data-rating="star"></span>
                    </template>
                    <span class="text-xs font-semibold ml-2" x-text="getRating(article.slug, criteria).toFixed(1)"></span>
                    <template x-if="showLetterGrades">
                      <span class="text-xs font-bold bg-base-300 px-1 py-0.5 rounded ml-1" 
                            :class="getLetterGrade(getRating(article.slug, criteria)).class" 
                            x-text="getLetterGrade(getRating(article.slug, criteria)).grade"></span>
                    </template>
                  </div>
                </template>
              </div>
            </template>
          </div>
        </div>
      </div>
    </template>
    
    <!-- Mobile Statistics Summary -->
    <div x-show="statistics && Object.keys(statistics).length > 0" class="card bg-base-200 shadow-md">
      <div class="card-body p-4">
        <h3 class="font-semibold text-lg mb-4 flex items-center">
          <span class="icon-[tabler--chart-bar] size-5 mr-2"></span>
          Statistics Summary
        </h3>
        
        <!-- Overall Stats -->
        <div class="mb-4 p-3 bg-base-100 rounded-lg">
          <div class="flex items-center justify-between mb-2">
            <span class="font-medium">Overall Rating</span>
            <div class="text-right">
              <template x-if="!statistics.overall || statistics.overall.count === 0">
                <span class="text-base-300">-</span>
              </template>
              <template x-if="statistics.overall && statistics.overall.count > 0">
                <div>
                  <div class="font-bold">
                    <span x-text="statistics.overall.average.toFixed(2)"></span>
                    <template x-if="showLetterGrades">
                      <span x-text="' (' + getLetterGrade(statistics.overall.average).grade + ')'"></span>
                    </template>
                  </div>
                  <div class="text-xs text-base-content/60">
                    <span x-text="'±' + statistics.overall.stdDev.toFixed(2) + ' (n=' + statistics.overall.count + ')'"></span>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </div>
        
        <!-- Criteria Stats Grid -->
        <div class="grid grid-cols-2 gap-3">
          <template x-for="criteria in ['writing_quality', 'originality', 'engagement', 'depth']" :key="criteria">
            <div class="flex flex-col items-center p-3 bg-base-100 rounded-lg">
              <span class="text-xs font-medium text-center mb-2" x-text="formatCriteriaName(criteria)"></span>
              <template x-if="!statistics[criteria] || statistics[criteria].count === 0">
                <span class="text-base-300">-</span>
              </template>
              <template x-if="statistics[criteria] && statistics[criteria].count > 0">
                <div class="text-center">
                  <div class="font-bold text-sm">
                    <span x-text="statistics[criteria].average.toFixed(2)"></span>
                    <template x-if="showLetterGrades">
                      <span x-text="' (' + getLetterGrade(statistics[criteria].average).grade + ')'"></span>
                    </template>
                  </div>
                  <div class="text-xs text-base-content/60">
                    <span x-text="'±' + statistics[criteria].stdDev.toFixed(2)"></span>
                  </div>
                </div>
              </template>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal for Detailed Analysis -->
<div id="analysisModal" class="overlay modal overlay-open:opacity-100 overlay-open:duration-300 hidden" role="dialog" tabindex="-1">
  <div class="modal-dialog overlay-open:opacity-100 overlay-open:duration-300 modal-dialog-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">
          <span class="icon-[tabler--analysis] size-6 mr-2"></span>
          <span id="modalTitleText">Detailed Analysis</span>
        </h3>
        <button type="button" class="btn btn-primary btn-text btn-circle btn-sm absolute end-3 top-3" data-overlay="#analysisModal" aria-label="Close">
          <span class="icon-[tabler--x] size-4"></span>
        </button>
      </div>
      <div class="modal-body">
        <div id="modalContentArea" class="space-y-6">

          <template x-if="currentModalData">
            <div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <template x-for="[criteria, info] in Object.entries(currentModalData.criteria)" :key="criteria">
                  <div class="card bg-base-100">
                    <div class="card-body">
                      <h4 class="card-title text-lg" x-text="formatCriteriaName(criteria)"></h4>
                      <div class="mb-3">
                        <div class="rating-stars flex items-center justify-center space-x-1">
                          <template x-for="star in [1,2,3,4,5]" :key="star">
                            <span :class="getStarIcon(getStarType(info.score, star)) + ' ' + getStarClass(getStarType(info.score, star))" 
                                  :data-rating="star"></span>
                          </template>
                          <div class="ml-2 flex items-center space-x-1">
                            <span class="text-xs font-semibold" x-text="info.score.toFixed(1)"></span>
                            <template x-if="showLetterGrades">
                              <span class="text-xs font-bold bg-base-200 px-1.5 py-0.5 rounded" 
                                    :class="getLetterGrade(info.score).class" 
                                    x-text="getLetterGrade(info.score).grade"></span>
                            </template>
                          </div>
                        </div>
                      </div>
                      <div class="space-y-3">
                        <div>
                          <h5 class="font-semibold text-success mb-2">Strengths:</h5>
                          <ul class="list-disc list-inside text-sm space-y-1">
                            <template x-for="strength in info.strengths" :key="strength">
                              <li x-text="strength"></li>
                            </template>
                          </ul>
                        </div>
                        <div>
                          <h5 class="font-semibold text-warning mb-2">Suggestions:</h5>
                          <ul class="list-disc list-inside text-sm space-y-1">
                            <template x-for="suggestion in info.suggestions" :key="suggestion">
                              <li x-text="suggestion"></li>
                            </template>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
              
              <div class="mt-6 p-4 bg-base-100 rounded-lg">
                <h4 class="font-semibold mb-3">Overall Assessment:</h4>
                
                <!-- Overall Rating Display -->
                <div class="mb-4 flex items-center justify-center">
                  <div class="badge badge-lg border flex items-center gap-2" 
                       :class="getOverallBadgeClasses(currentModalData.overall_rating).badgeClass">
                    <span class="flex items-center gap-1">
                      <span class="icon-[tabler--star] size-3"></span>
                      <span x-text="getOverallBadgeClasses(currentModalData.overall_rating).label"></span>
                    </span>
                    <span class="badge badge-sm" 
                          :class="getOverallBadgeClasses(currentModalData.overall_rating).nestedBadgeClass">
                      <span x-text="currentModalData.overall_rating.toFixed(1)"></span>
                      <template x-if="showLetterGrades">
                        <span x-text="' (' + getLetterGrade(currentModalData.overall_rating).grade + ')'"></span>
                      </template>
                    </span>
                  </div>
                </div>
                
                <!-- Star Rating Display -->
                <div class="mb-4 flex items-center justify-center">
                  <div class="rating-stars flex items-center space-x-1">
                    <template x-for="star in [1,2,3,4,5]" :key="star">
                      <span :class="getStarIcon(getStarType(currentModalData.overall_rating, star)) + ' ' + getStarClass(getStarType(currentModalData.overall_rating, star), 'size-6')" 
                            :data-rating="star"></span>
                    </template>
                    <div class="ml-3 flex items-center space-x-2">
                      <span class="text-lg font-semibold" x-text="currentModalData.overall_rating.toFixed(1)"></span>
                      <span class="text-sm text-base-content/60">/ 5.0</span>
                      <template x-if="showLetterGrades">
                        <span class="text-sm font-bold bg-base-200 px-2 py-1 rounded" 
                              :class="getLetterGrade(currentModalData.overall_rating).class" 
                              x-text="getLetterGrade(currentModalData.overall_rating).grade"></span>
                      </template>
                    </div>
                  </div>
                </div>
                
                <!-- Assessment Text -->
                <p class="text-sm" x-text="currentModalData.overall_assessment"></p>
              </div>
            </div>
          </template>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Tooltip for ratings -->
<div x-show="tooltipVisible" x-transition class="tooltip-content absolute z-50 p-4 bg-base-200 border border-base-300 rounded-lg shadow-lg max-w-sm" :style="`left: ${tooltipX}px; top: ${tooltipY}px`">
  <div class="font-semibold mb-2" x-text="tooltipTitle"></div>
  <div class="text-sm space-y-2">
    <div>
      <strong class="text-success">Strengths:</strong>
      <ul class="list-disc list-inside mt-1 text-xs">
        <template x-for="strength in tooltipStrengths" :key="strength">
          <li x-text="strength"></li>
        </template>
      </ul>
    </div>
    <div>
      <strong class="text-warning">Suggestions:</strong>
      <ul class="list-disc list-inside mt-1 text-xs">
        <template x-for="suggestion in tooltipSuggestions" :key="suggestion">
          <li x-text="suggestion"></li>
        </template>
      </ul>
    </div>
  </div>
</div>
</div>

<script>
document.addEventListener('alpine:init', () => {
  Alpine.data('ratingsApp', () => ({
    // Data
    ratingsData: {},
    articlesData: [
      {% for post in collections.posts %}
      {
        slug: '{{ post.data.slug or post.fileSlug }}',
        title: '{{ post.data.title | jsEscape | safe }}',
        author: {% if post.data.author %}'{{ post.data.author | jsEscape | safe }}'{% else %}null{% endif %},
        date: '{{ post.data.published_date }}',
        dateFormatted: '{{ post.data.published_date | date("MMM dd, yyyy") }}'
      }{% if not loop.last %},{% endif %}
      {% endfor %}
    ],
    
    // State
    currentSort: { field: null, direction: 'asc' },
    showLetterGrades: false,
    isGenerating: false,
    tooltipVisible: false,
    tooltipX: 0,
    tooltipY: 0,
    tooltipTitle: '',
    tooltipStrengths: [],
    tooltipSuggestions: [],
    currentModalData: null,
    statistics: {},

    // Methods
    getSortedArticles() {
      if (!this.currentSort.field) return this.articlesData;
      
      const sorted = this.articlesData.slice().sort((a, b) => {
        let valueA, valueB;
        
        switch (this.currentSort.field) {
          case 'title':
            valueA = a.title.toLowerCase();
            valueB = b.title.toLowerCase();
            break;
          case 'date':
            valueA = new Date(a.date);
            valueB = new Date(b.date);
            break;
          case 'overall':
            valueA = this.ratingsData[a.slug]?.overall_rating ?? 0;
            valueB = this.ratingsData[b.slug]?.overall_rating ?? 0;
            break;
          default: // rating criteria
            valueA = this.ratingsData[a.slug]?.criteria[this.currentSort.field]?.score ?? 0;
            valueB = this.ratingsData[b.slug]?.criteria[this.currentSort.field]?.score ?? 0;
        }
        
        if (valueA < valueB) return this.currentSort.direction === 'asc' ? -1 : 1;
        if (valueA > valueB) return this.currentSort.direction === 'asc' ? 1 : -1;
        return 0;
      });
      
      return sorted;
    },

    updateStatistics() {
      const criteria = ['writing_quality', 'originality', 'engagement', 'depth'];
      const stats = {};
      
      const allCriteria = [...criteria, 'overall'];
      
      allCriteria.forEach(criterion => {
        const values = [];
        
        Object.values(this.ratingsData).forEach(articleData => {
          if (criterion === 'overall') {
            if (articleData.overall_rating !== undefined) {
              values.push(articleData.overall_rating);
            }
          } else {
            if (articleData.criteria && articleData.criteria[criterion] && articleData.criteria[criterion].score !== undefined) {
              values.push(articleData.criteria[criterion].score);
            }
          }
        });
        
        if (values.length > 0) {
          const average = values.reduce((sum, val) => sum + val, 0) / values.length;
          const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / values.length;
          const stdDev = Math.sqrt(variance);
          
          stats[criterion] = {
            average: average,
            stdDev: stdDev,
            count: values.length
          };
        } else {
          stats[criterion] = {
            average: 0,
            stdDev: 0,
            count: 0
          };
        }
      });
      
      this.statistics = stats;
    },

    async init() {
      await this.loadRatings();
    },

    async loadRatings() {
      try {
        const response = await fetch('/api/ratings.json');
        if (response.ok) {
          this.ratingsData = await response.json();
          this.updateStatistics();
        } else {
          console.log('No ratings data found. Generate ratings first.');
          this.statistics = {};
        }
      } catch (error) {
        console.error('Error loading ratings:', error);
        this.statistics = {};
      }
    },

    async generateRatings() {
      this.isGenerating = true;
      
      try {
        const response = await fetch('/api/generate-ratings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          await this.loadRatings();
          this.showNotification('Ratings generated successfully!', 'success');
        } else {
          throw new Error('Failed to generate ratings');
        }
      } catch (error) {
        console.error('Error generating ratings:', error);
        this.showNotification('Failed to generate ratings', 'error');
      } finally {
        this.isGenerating = false;
      }
    },

    sortArticles(field, direction = null) {
      if (direction) {
        this.currentSort.direction = direction;
      } else if (this.currentSort.field === field) {
        this.currentSort.direction = this.currentSort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        this.currentSort.direction = 'desc';
        if (field === 'title') this.currentSort.direction = 'asc';
      }
      
      this.currentSort.field = field;
    },

    getSortIcon(field) {
      if (this.currentSort.field !== field) {
        return 'icon-[tabler--selector]';
      }
      return this.currentSort.direction === 'asc' ? 'icon-[tabler--chevron-up]' : 'icon-[tabler--chevron-down]';
    },

    getAuthorInitials(author, title) {
      if (author) {
        const words = author.split(' ');
        if (words.length > 1) {
          return (words[0].charAt(0) + words[1].charAt(0)).toUpperCase();
        } else {
          return author.charAt(0).toUpperCase();
        }
      } else {
        return title.charAt(0).toUpperCase();
      }
    },

    getRating(articleSlug, criteria) {
      return this.ratingsData[articleSlug]?.criteria[criteria]?.score ?? null;
    },

    getOverallRating(articleSlug) {
      return this.ratingsData[articleSlug]?.overall_rating ?? null;
    },

    hasRatingData(articleSlug) {
      return !!this.ratingsData[articleSlug];
    },

    getLetterGrade(rating) {
      if (rating >= 4.7) return { grade: 'A+', class: 'text-success' };
      if (rating >= 4.3) return { grade: 'A', class: 'text-success' };
      if (rating >= 4.0) return { grade: 'A-', class: 'text-success' };
      if (rating >= 3.5) return { grade: 'B+', class: 'text-success' };
      if (rating >= 3.0) return { grade: 'B', class: 'text-warning' };
      if (rating >= 2.7) return { grade: 'B-', class: 'text-warning' };
      if (rating >= 2.3) return { grade: 'C+', class: 'text-warning' };
      if (rating >= 2.0) return { grade: 'C', class: 'text-warning' };
      if (rating >= 1.7) return { grade: 'C-', class: 'text-warning' };
      if (rating >= 1.3) return { grade: 'D+', class: 'text-error' };
      if (rating >= 1.0) return { grade: 'D', class: 'text-error' };
      if (rating >= 0.7) return { grade: 'D-', class: 'text-error' };
      return { grade: 'F', class: 'text-error' };
    },

    // Helper methods for star ratings (Alpine.js way)
    getStarType(rating, starIndex) {
      const fullStars = Math.floor(rating);
      const hasHalfStar = rating % 1 >= 0.5;
      
      if (starIndex <= fullStars) {
        return 'filled';
      } else if (starIndex === fullStars + 1 && hasHalfStar) {
        return 'half';
      } else {
        return 'empty';
      }
    },

    getStarIcon(starType) {
      switch (starType) {
        case 'filled': return 'icon-[tabler--star-filled]';
        case 'half': return 'icon-[tabler--star-half-filled]';
        default: return 'icon-[tabler--star]';
      }
    },

    getStarClass(starType, size = 'size-4') {
      const baseClass = `${size} cursor-pointer hover:scale-110 transition-transform`;
      return starType === 'empty' 
        ? `${baseClass} text-base-300` 
        : `${baseClass} text-warning`;
    },

    getOverallBadgeClasses(rating) {
      if (rating >= 4.7) {
        return {
          badgeClass: 'text-success bg-success/30 border-success/50',
          nestedBadgeClass: 'badge-success',
          label: 'Excellent'
        };
      } else if (rating >= 4.3) {
        return {
          badgeClass: 'text-success bg-success/20 border-success/40',
          nestedBadgeClass: 'badge-success',
          label: 'Excellent'
        };
      } else if (rating >= 4.0) {
        return {
          badgeClass: 'text-success bg-success/15 border-success/30',
          nestedBadgeClass: 'badge-success',
          label: 'Very Good'
        };
      } else if (rating >= 3.5) {
        return {
          badgeClass: 'text-success/80 bg-success/10 border-success/20',
          nestedBadgeClass: 'badge-success',
          label: 'Good'
        };
      } else if (rating >= 3.0) {
        return {
          badgeClass: 'text-warning bg-warning/25 border-warning/40',
          nestedBadgeClass: 'badge-warning',
          label: 'Fair'
        };
      } else if (rating >= 2.5) {
        return {
          badgeClass: 'text-warning/90 bg-warning/15 border-warning/30',
          nestedBadgeClass: 'badge-warning',
          label: 'Below Average'
        };
      } else if (rating >= 2.0) {
        return {
          badgeClass: 'text-error/90 bg-error/15 border-error/30',
          nestedBadgeClass: 'badge-error',
          label: 'Poor'
        };
      } else if (rating >= 1.5) {
        return {
          badgeClass: 'text-error bg-error/20 border-error/40',
          nestedBadgeClass: 'badge-error',
          label: 'Poor'
        };
      } else {
        return {
          badgeClass: 'text-error bg-error/30 border-error/50',
          nestedBadgeClass: 'badge-error',
          label: 'Very Poor'
        };
      }
    },

    formatCriteriaName(criteria) {
      return criteria.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
    },

    showTooltip(event, criteria, articleSlug) {
      const data = this.ratingsData[articleSlug]?.criteria[criteria];
      if (!data) return;
      
      this.tooltipTitle = `${this.formatCriteriaName(criteria)} - ${data.score}/5`;
      this.tooltipStrengths = data.strengths;
      this.tooltipSuggestions = data.suggestions;
      this.tooltipX = event.pageX + 10;
      this.tooltipY = event.pageY - 10;
      this.tooltipVisible = true;
    },

    hideTooltip() {
      this.tooltipVisible = false;
    },

    openModal(articleSlug) {
      const data = this.ratingsData[articleSlug];
      if (!data) {
        this.showNotification('No analysis data available for this article', 'error');
        return;
      }
      
      // Update modal title
      const modalTitleElement = document.getElementById('modalTitleText');
      if (modalTitleElement) {
        modalTitleElement.textContent = `Analysis: ${data.title}`;
      }
      
      // Store the data for the modal to use
      this.currentModalData = data;
    },

    showNotification(message, type) {
      const notification = document.createElement('div');
      notification.className = `alert alert-${type} fixed top-4 right-4 z-50 w-auto`;
      notification.innerHTML = `
        <span class="icon-[tabler--${type === 'success' ? 'check' : 'x'}] size-5"></span>
        <span>${message}</span>
      `;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    }
  }));
});
</script>

<style>
.tooltip-content {
  z-index: 1000;
}

.rating-stars:hover {
  transform: scale(1.05);
  transition: transform 0.2s ease;
}

/* Additional modal backdrop styling to ensure proper dimming */
.overlay.modal {
  background-color: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.overlay.modal.overlay-open\:opacity-100 {
  background-color: rgba(0, 0, 0, 0.6);
}
</style> 